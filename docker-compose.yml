version: "3.8"

services:
  
  kafka:
    image: docker.io/bitnami/kafka:3.2
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "./kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  kafka-connect:
    image: confluentinc/kafka-connect:latest
    container_name: kafka_connect
    build:
      context: .
      dockerfile: Dockerfile.kafkaConnect
    ports:
     - 8083:8083
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_REST_PORT=8082
      - CONNECT_GROUP_ID=quickstart
      - CONNECT_CONFIG_STORAGE_TOPIC=quickstart-config
      - CONNECT_OFFSET_STORAGE_TOPIC=quickstart-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=quickstart-status
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=localhost
      - CONNECT_PLUGIN_PATH=/usr/share/confluent-hub-components
    depends_on:
      - kafka
  

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0
  #   container_name: elasticsearch
  #   #restart: always
  #   healthcheck:
  #     start_period: 10s
  #     interval: 10s
  #     retries: 20
  #     test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   environment:
  #     discovery.type: "single-node"
  #     ES_JAVA_OPTS: "-Xms1g -Xmx1g"
  #     cluster.name: "elasticsearch-kafka-demo"

  # kibana:
  #   image: docker.elastic.co/kibana/kibana-oss:7.10.0
  #   container_name: kibana
  #   restart: always
  #   healthcheck:
  #     interval: 10s
  #     retries: 20
  #     test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://kibana:5601/api/status || exit 1
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   ports:
  #     - 5601:5601
  #   environment:
  #     NEWSFEED_ENABLED: 'false'
  #     TELEMETRY_OPTIN: 'false'
  #     TELEMETRY_ENABLED: 'false'
  #     SERVER_MAXPAYLOADBYTES: 4194304
  #     KIBANA_AUTOCOMPLETETIMEOUT: 3000
  #     KIBANA_AUTOCOMPLETETERMINATEAFTER: 2500000


